# docker config
# @host = localhost:8080
# @keycloak = localhost:8181

# kind config
@host = gc.127.0.0.1.nip.io
@keycloak = keycloak.127.0.0.1.nip.io

# Get Token
###

# curl -L 'http://localhost:8181/realms/gocommerce/protocol/openid-connect/token' -H 'Content-Type: application/x-www-form-urlencoded' --data-urlencode 'client_id=gocommerce-api' --data-urlencode 'client_secret=secret' --data-urlencode 'username=user' --data-urlencode 'password=password' --data-urlencode 'grant_type=password'
POST http://{{keycloak}}/auth/realms/gocommerce/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

client_id = gocommerce-api &
client_secret = secret &
username = user &
password = password &
grant_type = password

> {%
    client.global.set("token", response.body.access_token);
%}

###

############################# Product Service API #############################

@product_base_url = http://{{host}}/api/products

###

# Create a new product
POST {{product_base_url}} HTTP/1.1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Sample Product",
  "price": 1999,
  "stock": 100
}

> {%
    client.global.set("productID", response.body.id);
%}

###

# Get an product by ID
GET {{product_base_url}}/{{productID}} HTTP/1.1

###

# Get all products
GET {{product_base_url}}?offset=0&limit=100 HTTP/1.1

###

# Update an product by ID
PUT {{product_base_url}}/{{productID}} HTTP/1.1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Updated Product",
  "price": 2499,
  "stock": 10,
  "version": 1
}

###
# update product stock
PUT {{product_base_url}}/{{productID}}/stock HTTP/1.1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "stock": 50,
  "version": 2
}

###

# Delete an product by ID
DELETE {{product_base_url}}/{{productID}}?version=3 HTTP/1.1
Authorization: Bearer {{token}}

###

############################# Order Service API #############################

@order_base_url = http://{{host}}/api/orders

# Create a new order
POST {{order_base_url}} HTTP/1.1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "user_id": "123e4567-e89b-12d3-a456-426614174000",
  "status": "pending",
  "items": [
    {
      "product_id": "{{productID}}",
      "quantity": 1,
      "price_per_item": 100,
      "price": 100
    }
  ]
}

> {%
    client.global.set("orderID", response.body.id);
%}

###

# Get an order by ID
GET {{order_base_url}}/{{orderID}} HTTP/1.1
Authorization: Bearer {{token}}


###

# Get all orders for a user1
GET {{order_base_url}}?offset=0&limit=100 HTTP/1.1
Authorization: Bearer {{token}}

###

# Update an order by ID
PUT {{order_base_url}}/{{orderID}} HTTP/1.1
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "status": "shipped",
  "version": 1
}

###

############################# User Service API #############################

@user_register_url = http://{{host}}/api/auth/register

POST {{user_register_url}}
Content-Type: application/json

{
  "user_name": "jdoe",
  "first_name": "John",
  "last_name": "Doe",
  "email": "jdoe@example.com",
  "password": "password"
}
