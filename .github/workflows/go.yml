name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  find-modules:
    name: Find All Modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.find-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v4

      - name: Find all modules
        id: find-modules
        run: |
          MODULES_JSON=$(find . -name "go.mod" -not -path "./vendor/*" -exec dirname {} \; | sed 's|^\./||' | jq -R . | jq -s -c .)
          echo "modules=$MODULES_JSON" >> $GITHUB_OUTPUT

  verify_build_lint_test:
    name: (${{ matrix.module }})
    needs: find-modules
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.find-modules.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4

      - name: Read Go version from go.mod
        id: go-version
        working-directory: ${{ matrix.module }}
        run: |
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}')
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT
          echo "Using Go version: $GO_VERSION"

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.version }}
          cache: true
          cache-dependency-path: |
            ${{ matrix.module }}/go.sum
            pkg/go.sum

      - name: Verify dependencies
        working-directory: ${{ matrix.module }}
        run: |
          go mod tidy

          files_to_check="go.mod"
          if [ -f go.sum ]; then
            files_to_check="$files_to_check go.sum"
          fi
          echo "Checking files: $files_to_check"
          if ! git diff --quiet --exit-code $files_to_check; then
            echo "❌ go.mod/go.sum not in sync. Run 'go mod tidy' and commit the changes."
            exit 1
          fi

          if grep -q "require" go.mod; then
            echo "Dependencies found, running 'go mod verify'..."
            go mod verify
          else
            echo "No dependencies found in go.mod, skipping 'go mod verify'."
          fi

      - name: Check formatting
        working-directory: ${{ matrix.module }}
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: v2.1.0
          args: --timeout 10m
          working-directory: ${{ matrix.module }}
          skip-cache: false

      - name: Build
        working-directory: ${{ matrix.module }}
        run: go build -v ./...

      - name: Test with coverage
        working-directory: ${{ matrix.module }}
        run: |
          go test -race -v -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.module }}
          path: ${{ matrix.module }}/coverage.out
          if-no-files-found: ignore
