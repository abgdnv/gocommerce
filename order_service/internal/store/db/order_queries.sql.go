// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (user_id, status)
VALUES ($1, $2)
RETURNING id, user_id, status, version, created_at
`

type CreateOrderParams struct {
	UserID uuid.UUID `json:"user_id"`
	Status string    `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity, price_per_item, price)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, order_id, product_id, quantity, price_per_item, price, version, created_at
`

type CreateOrderItemParams struct {
	OrderID      uuid.UUID `json:"order_id"`
	ProductID    uuid.UUID `json:"product_id"`
	Quantity     int32     `json:"quantity"`
	PricePerItem int64     `json:"price_per_item"`
	Price        int64     `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.PricePerItem,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.PricePerItem,
		&i.Price,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const findOrderByID = `-- name: FindOrderByID :one
SELECT id, user_id, status, version, created_at
FROM orders
WHERE id = $1
`

func (q *Queries) FindOrderByID(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, findOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const findOrderItemsByOrderID = `-- name: FindOrderItemsByOrderID :many
SELECT id,
       order_id,
       product_id,
       quantity,
       price_per_item,
       price,
       version,
       created_at
FROM order_items
WHERE order_id = $1
`

func (q *Queries) FindOrderItemsByOrderID(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, findOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.PricePerItem,
			&i.Price,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrdersByUserID = `-- name: FindOrdersByUserID :many
SELECT id, user_id, status, version, created_at
FROM orders
where user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type FindOrdersByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) FindOrdersByUserID(ctx context.Context, arg FindOrdersByUserIDParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, findOrdersByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET status  = $2,
    version = version + 1
WHERE id = $1
  AND version = $3
RETURNING id, user_id, status, version, created_at
`

type UpdateOrderParams struct {
	ID      uuid.UUID `json:"id"`
	Status  string    `json:"status"`
	Version int32     `json:"version"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.ID, arg.Status, arg.Version)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}
