// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO products (name,
                      price,
                      stock_quantity
                      )
VALUES ($1, $2, $3)
RETURNING id, name, price, stock_quantity, version, created_at
`

type CreateParams struct {
	Name          string `json:"name"`
	Price         int64  `json:"price"`
	StockQuantity int32  `json:"stock_quantity"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Product, error) {
	row := q.db.QueryRow(ctx, create, arg.Name, arg.Price, arg.StockQuantity)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.StockQuantity,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const delete = `-- name: Delete :execrows
DELETE
FROM products
WHERE id = $1 AND VERSION = $2
`

type DeleteParams struct {
	ID      uuid.UUID `json:"id"`
	Version int32     `json:"version"`
}

func (q *Queries) Delete(ctx context.Context, arg DeleteParams) (int64, error) {
	result, err := q.db.Exec(ctx, delete, arg.ID, arg.Version)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAll = `-- name: FindAll :many
SELECT id, name, price, stock_quantity, version, created_at
FROM products
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type FindAllParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) FindAll(ctx context.Context, arg FindAllParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, findAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.StockQuantity,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByID = `-- name: FindByID :one
SELECT id, name, price, stock_quantity, version, created_at
FROM products
WHERE id = $1
`

func (q *Queries) FindByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, findByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.StockQuantity,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const findByIDs = `-- name: FindByIDs :many
SELECT id, name, price, stock_quantity, version, created_at FROM products
WHERE id = ANY($1::uuid[])
`

func (q *Queries) FindByIDs(ctx context.Context, ids []uuid.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, findByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.StockQuantity,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE products
SET name           = $2,
    price          = $3,
    stock_quantity = $4,
    version        = version + 1
WHERE id = $1 AND VERSION = $5
RETURNING id, name, price, stock_quantity, version, created_at
`

type UpdateParams struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	Price         int64     `json:"price"`
	StockQuantity int32     `json:"stock_quantity"`
	Version       int32     `json:"version"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (Product, error) {
	row := q.db.QueryRow(ctx, update,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.StockQuantity,
		arg.Version,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.StockQuantity,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const updateStock = `-- name: UpdateStock :one
UPDATE products
SET stock_quantity = $2,
    version        = version + 1
WHERE id = $1 AND VERSION = $3
RETURNING id, name, price, stock_quantity, version, created_at
`

type UpdateStockParams struct {
	ID            uuid.UUID `json:"id"`
	StockQuantity int32     `json:"stock_quantity"`
	Version       int32     `json:"version"`
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateStock, arg.ID, arg.StockQuantity, arg.Version)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.StockQuantity,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}
