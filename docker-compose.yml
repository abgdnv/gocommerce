services:
  db:
    image: postgres:17.5-alpine
    restart: always
    container_name: postgres
    ports:
      - "${POSTGRES_PORT_HOST}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  nats:
    image: nats:2.11.6-alpine
    container_name: nats
    ports:
      - "${NATS_HOST_PORT_CLIENT}:4222"
      - "${NATS_HOST_PORT_ROUTING}:6222"
      - "${NATS_HOST_PORT_MONITORING}:${NATS_INTERNAL_MONITORING_PORT}"
    command:
      - "--jetstream"
      - "--http_port=${NATS_INTERNAL_MONITORING_PORT}"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:${NATS_INTERNAL_MONITORING_PORT}/healthz || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  product_migrator:
    image: migrate/migrate:4
    container_name: product-migrator
    command: ["-path", "/migrations", "-database", "${PRODUCT_SVC_DATABASE_URL}", "up"]
    volumes:
      - ./deploy/migrations/product_service:/migrations
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy

  product_service:
    build:
      context: .
      dockerfile: product_service/Dockerfile
      args:
        PRODUCT_SVC_DOCKER_IMAGE: ${PRODUCT_SVC_DOCKER_IMAGE}
        PRODUCT_SVC_DOCKER_TAG: ${PRODUCT_SVC_DOCKER_TAG}
    image: ${PRODUCT_SVC_DOCKER_IMAGE}:${PRODUCT_SVC_DOCKER_TAG}
    restart: unless-stopped
    container_name: product-service
    ports:
      - "${PRODUCT_SVC_HOST_PORT}:${PRODUCT_SVC_SERVER_PORT}"
      - "${PRODUCT_SVC_PPROF_HOST_PORT}:${PRODUCT_SVC_PPROF_PORT}"
      - "${PRODUCT_SVC_GRPC_HOST_PORT}:${PRODUCT_SVC_GRPC_PORT}"
    environment:
      - PRODUCT_SVC_SERVER_PORT=${PRODUCT_SVC_SERVER_PORT}
      - PRODUCT_SVC_DATABASE_URL=${PRODUCT_SVC_DATABASE_URL}
      - PRODUCT_SVC_LOG_LEVEL=${PRODUCT_SVC_LOG_LEVEL}
      - PRODUCT_SVC_SERVER_MAXHEADERBYTES=${PRODUCT_SVC_SERVER_MAXHEADERBYTES}
      - PRODUCT_SVC_SERVER_TIMEOUT_READ=${PRODUCT_SVC_SERVER_TIMEOUT_READ}
      - PRODUCT_SVC_SERVER_TIMEOUT_WRITE=${PRODUCT_SVC_SERVER_TIMEOUT_WRITE}
      - PRODUCT_SVC_SERVER_TIMEOUT_IDLE=${PRODUCT_SVC_SERVER_TIMEOUT_IDLE}
      - PRODUCT_SVC_SERVER_TIMEOUT_READHEADER=${PRODUCT_SVC_SERVER_TIMEOUT_READHEADER}
      - PRODUCT_SVC_PPROF_ENABLED=${PRODUCT_SVC_PPROF_ENABLED}
      - PRODUCT_SVC_PPROF_ADDR=${PRODUCT_SVC_PPROF_ADDR}
      - PRODUCT_SVC_GRPC_PORT=${PRODUCT_SVC_GRPC_PORT}
      - PRODUCT_SVC_GRPC_REFLECTION=${PRODUCT_SVC_GRPC_REFLECTION}
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy
      product_migrator:
        condition: service_completed_successfully

  order_migrator:
    image: migrate/migrate:4
    container_name: order-migrator
    command: ["-path", "/migrations", "-database", "${ORDER_SVC_DATABASE_URL}", "up"]
    volumes:
      - ./deploy/migrations/order_service:/migrations
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy

  order_service:
    build:
      context: .
      dockerfile: order_service/Dockerfile
      args:
        ORDER_SVC_DOCKER_IMAGE: ${ORDER_SVC_DOCKER_IMAGE}
        ORDER_SVC_DOCKER_TAG: ${ORDER_SVC_DOCKER_TAG}
    image: ${ORDER_SVC_DOCKER_IMAGE}:${ORDER_SVC_DOCKER_TAG}
    restart: unless-stopped
    container_name: order-service
    ports:
      - "${ORDER_SVC_HOST_PORT}:${ORDER_SVC_SERVER_PORT}"
      - "${ORDER_SVC_PPROF_HOST_PORT}:${ORDER_SVC_PPROF_PORT}"
    environment:
      - ORDER_SVC_SERVER_PORT=${ORDER_SVC_SERVER_PORT}
      - ORDER_SVC_DATABASE_URL=${ORDER_SVC_DATABASE_URL}
      - ORDER_SVC_DATABASE_TIMEOUT=${ORDER_SVC_DATABASE_TIMEOUT}
      - ORDER_SVC_LOG_LEVEL=${ORDER_SVC_LOG_LEVEL}
      - ORDER_SVC_SERVER_MAXHEADERBYTES=${ORDER_SVC_SERVER_MAXHEADERBYTES}
      - ORDER_SVC_SERVER_TIMEOUT_READ=${ORDER_SVC_SERVER_TIMEOUT_READ}
      - ORDER_SVC_SERVER_TIMEOUT_WRITE=${ORDER_SVC_SERVER_TIMEOUT_WRITE}
      - ORDER_SVC_SERVER_TIMEOUT_IDLE=${ORDER_SVC_SERVER_TIMEOUT_IDLE}
      - ORDER_SVC_SERVER_TIMEOUT_READHEADER=${ORDER_SVC_SERVER_TIMEOUT_READHEADER}
      - ORDER_SVC_PPROF_ENABLED=${ORDER_SVC_PPROF_ENABLED}
      - ORDER_SVC_PPROF_ADDR=${ORDER_SVC_PPROF_ADDR}
      - ORDER_SVC_SERVICES_PRODUCT_GRPC_ADDR=${ORDER_SVC_SERVICES_PRODUCT_GRPC_ADDR}
      - ORDER_SVC_NATS_URL=${ORDER_SVC_NATS_URL}
      - ORDER_SVC_NATS_TIMEOUT=${ORDER_SVC_NATS_TIMEOUT}
      - ORDER_SVC_SHUTDOWN_TIMEOUT=${ORDER_SVC_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy
      nats:
        condition: service_healthy
      order_migrator:
        condition: service_completed_successfully



volumes:
  postgres_data:
    name: postgres_data

networks:
  ecommerce-network:
    name: ecommerce-network
