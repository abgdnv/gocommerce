volumes:
  postgres_data:
    name: postgres_data
  nats_data:
    name: nats_data
  kc_data:
    name: kc_data
  prom_data:
    name: prom_data
  grafana_data:
    name: grafana_data
  promtail-data:
    name: promtail-data

networks:
  ecommerce-network:
    name: ecommerce-network

services:
  db:
    image: postgres:17.5-alpine
    restart: always
    container_name: postgres
    ports:
      - "${POSTGRES_PORT_HOST}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  nats:
    image: nats:2.11.6-alpine
    container_name: nats
    ports:
      - "${NATS_HOST_PORT_CLIENT}:4222"
      - "${NATS_HOST_PORT_ROUTING}:6222"
      - "${NATS_HOST_PORT_MONITORING}:${NATS_INTERNAL_MONITORING_PORT}"
    command:
      - "--jetstream"
      - "--store_dir=/data"
      - "--http_port=${NATS_INTERNAL_MONITORING_PORT}"
    volumes:
      - nats_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:${NATS_INTERNAL_MONITORING_PORT}/healthz || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  nats-stream-setup:
    image: natsio/nats-box:0.18.0-nonroot
    container_name: nats-stream-setup
    command: >
      sh -c "
        set -e
        for stream_config_file in /config/*.json; do
          echo \"Processing stream config: $$stream_config_file\"
          STREAM_NAME=$$(jq -r '.name' \"$$stream_config_file\")
          if [ -z \"$$STREAM_NAME\" ]; then
            echo \"Error: Could not find .name in $$stream_config_file\"
            exit 1
          fi
          echo \"Applying config for stream: $$STREAM_NAME\"
          nats --server=nats:4222 stream create --config=\"$$stream_config_file\" || \
          nats --server=nats:4222 stream update \"$$STREAM_NAME\" --\"config=$$stream_config_file\" -f
        done
        echo \"All stream configurations applied successfully.\"
      "
    volumes:
      - ./deploy/charts/nats/streams:/config
    networks:
      - ecommerce-network
    depends_on:
      nats:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    container_name: keycloak
    command:
     - start-dev
     - --import-realm
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      - KC_HTTP_RELATIVE_PATH=/auth
      - KC_HOSTNAME=localhost
      - KC_HOSTNAME_PORT=${KC_HTTP_HOST_PORT}
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HOSTNAME_STRICT=false
    ports:
      - "${KC_HTTP_HOST_PORT}:8080"
    volumes:
      - kc_data:/opt/keycloak/data/
      - ./deploy/charts/keycloak/realm/:/opt/keycloak/data/import
    networks:
      - ecommerce-network

  kc_check:
    image: busybox:1.37
    container_name: kc_check
    command: >
      sh -c '
        set -e
        echo "Waiting for keycloak at keycloak:8080..."
        until printf "." && nc -z -w 2 keycloak 8080; do
            sleep 2;
        done;
      '
    networks:
      - ecommerce-network
    depends_on:
      keycloak:
        condition: service_started

  jaeger:
    image: cr.jaegertracing.io/jaegertracing/jaeger:2.9.0
    container_name: jaeger
    ports:
      - "16686:16686"     # Web UI
      - "4318:4318"       # OTLP HTTP
    networks:
      - ecommerce-network

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prom_data:/prometheus
    networks:
      - ecommerce-network

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ecommerce-network

  loki:
    image: grafana/loki
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ecommerce-network

  promtail:
    image: grafana/promtail
    container_name: promtail
    ports:
      - "9080:9080"
    command: -config.file=/etc/promtail/config.yaml
    volumes:
      - ./docker/promtail/config.yaml:/etc/promtail/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      - promtail-data:/var/lib/promtail
    networks:
      - ecommerce-network
    depends_on:
      - loki

  product_migrator:
    image: migrate/migrate:4
    container_name: product-migrator
    command: [ "-path", "/migrations", "-database", "${PRODUCT_DB_URI}", "up" ]
    volumes:
      - ./deploy/charts/db-migrations/migrations/product:/migrations
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy

  product_service:
    build:
      context: .
      dockerfile: product_service/Dockerfile
      args:
        PRODUCT_DOCKER_IMAGE: ${PRODUCT_DOCKER_IMAGE}
        PRODUCT_DOCKER_TAG: ${PRODUCT_DOCKER_TAG}
    image: ${PRODUCT_DOCKER_IMAGE}:${PRODUCT_DOCKER_TAG}
    restart: unless-stopped
    container_name: product-service
    ports:
      - "${PRODUCT_HOST_PORT}:${PRODUCT_SERVER_PORT}"
      - "${PRODUCT_PPROF_HOST_PORT}:${PRODUCT_PPROF_PORT}"
      - "${PRODUCT_GRPC_HOST_PORT}:${PRODUCT_GRPC_PORT}"
    environment:
      - PRODUCT_DB_HOST=${PRODUCT_DB_HOST}
      - PRODUCT_DB_PORT=${PRODUCT_DB_PORT}
      - PRODUCT_DB_USER=${PRODUCT_DB_USER}
      - PRODUCT_DB_PASSWORD=${PRODUCT_DB_PASSWORD}
      - PRODUCT_DB_NAME=${PRODUCT_DB_NAME}
      - PRODUCT_DB_SSLMODE=${PRODUCT_DB_SSLMODE}
      - PRODUCT_DB_TIMEOUT=${PRODUCT_DB_TIMEOUT}
      - PRODUCT_SERVER_PORT=${PRODUCT_SERVER_PORT}
      - PRODUCT_SERVER_MAXHEADERBYTES=${PRODUCT_SERVER_MAXHEADERBYTES}
      - PRODUCT_SERVER_TIMEOUT_READ=${PRODUCT_SERVER_TIMEOUT_READ}
      - PRODUCT_SERVER_TIMEOUT_WRITE=${PRODUCT_SERVER_TIMEOUT_WRITE}
      - PRODUCT_SERVER_TIMEOUT_IDLE=${PRODUCT_SERVER_TIMEOUT_IDLE}
      - PRODUCT_SERVER_TIMEOUT_READHEADER=${PRODUCT_SERVER_TIMEOUT_READHEADER}
      - PRODUCT_GRPC_PORT=${PRODUCT_GRPC_PORT}
      - PRODUCT_GRPC_REFLECTION=${PRODUCT_GRPC_REFLECTION}
      - PRODUCT_LOG_LEVEL=${PRODUCT_LOG_LEVEL}
      - PRODUCT_PPROF_ENABLED=${PRODUCT_PPROF_ENABLED}
      - PRODUCT_PPROF_ADDR=${PRODUCT_PPROF_ADDR}
      - PRODUCT_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT=${PRODUCT_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT}
      - PRODUCT_TELEMETRY_TRACES_OTLPHTTP_INSECURE=${PRODUCT_TELEMETRY_TRACES_OTLPHTTP_INSECURE}
      - PRODUCT_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT=${PRODUCT_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT}
      - PRODUCT_SHUTDOWN_TIMEOUT=${PRODUCT_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy
      product_migrator:
        condition: service_completed_successfully

  order_migrator:
    image: migrate/migrate:4
    container_name: order-migrator
    command: [ "-path", "/migrations", "-database", "${ORDER_DB_URI}", "up" ]
    volumes:
      - ./deploy/charts/db-migrations/migrations/order:/migrations
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy

  order_service:
    build:
      context: .
      dockerfile: order_service/Dockerfile
      args:
        ORDER_DOCKER_IMAGE: ${ORDER_DOCKER_IMAGE}
        ORDER_DOCKER_TAG: ${ORDER_DOCKER_TAG}
    image: ${ORDER_DOCKER_IMAGE}:${ORDER_DOCKER_TAG}
    restart: unless-stopped
    container_name: order-service
    ports:
      - "${ORDER_HOST_PORT}:${ORDER_SERVER_PORT}"
      - "${ORDER_PPROF_HOST_PORT}:${ORDER_PPROF_PORT}"
      - "${ORDER_TELEMETRY_METRICS_HOST_PORT}:${ORDER_TELEMETRY_METRICS_PORT}"
    environment:
      - ORDER_DB_HOST=${ORDER_DB_HOST}
      - ORDER_DB_PORT=${ORDER_DB_PORT}
      - ORDER_DB_USER=${ORDER_DB_USER}
      - ORDER_DB_PASSWORD=${ORDER_DB_PASSWORD}
      - ORDER_DB_NAME=${ORDER_DB_NAME}
      - ORDER_DB_SSLMODE=${ORDER_DB_SSLMODE}
      - ORDER_DB_TIMEOUT=${ORDER_DB_TIMEOUT}
      - ORDER_SERVER_PORT=${ORDER_SERVER_PORT}
      - ORDER_SERVER_MAXHEADERBYTES=${ORDER_SERVER_MAXHEADERBYTES}
      - ORDER_SERVER_TIMEOUT_READ=${ORDER_SERVER_TIMEOUT_READ}
      - ORDER_SERVER_TIMEOUT_WRITE=${ORDER_SERVER_TIMEOUT_WRITE}
      - ORDER_SERVER_TIMEOUT_IDLE=${ORDER_SERVER_TIMEOUT_IDLE}
      - ORDER_SERVER_TIMEOUT_READHEADER=${ORDER_SERVER_TIMEOUT_READHEADER}
      - ORDER_LOG_LEVEL=${ORDER_LOG_LEVEL}
      - ORDER_PPROF_ENABLED=${ORDER_PPROF_ENABLED}
      - ORDER_PPROF_ADDR=${ORDER_PPROF_ADDR}
      - ORDER_SERVICES_PRODUCT_GRPC_ADDR=${ORDER_SERVICES_PRODUCT_GRPC_ADDR}
      - ORDER_SERVICES_PRODUCT_GRPC_TIMEOUT=${ORDER_SERVICES_PRODUCT_GRPC_TIMEOUT}
      - ORDER_NATS_URL=${ORDER_NATS_URL}
      - ORDER_NATS_TIMEOUT=${ORDER_NATS_TIMEOUT}
      - ORDER_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT=${ORDER_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT}
      - ORDER_TELEMETRY_TRACES_OTLPHTTP_INSECURE=${ORDER_TELEMETRY_TRACES_OTLPHTTP_INSECURE}
      - ORDER_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT=${ORDER_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT}
      - ORDER_TELEMETRY_METRICS_ENABLED=${ORDER_TELEMETRY_METRICS_ENABLED}
      - ORDER_TELEMETRY_METRICS_ADDR=${ORDER_TELEMETRY_METRICS_ADDR}
      - ORDER_SHUTDOWN_TIMEOUT=${ORDER_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy
      nats:
        condition: service_healthy
      order_migrator:
        condition: service_completed_successfully

  notification_service:
    build:
      context: .
      dockerfile: notification_service/Dockerfile
      args:
        NOTIFICATION_DOCKER_IMAGE: ${NOTIFICATION_DOCKER_IMAGE}
        NOTIFICATION_DOCKER_TAG: ${NOTIFICATION_DOCKER_TAG}
    image: ${NOTIFICATION_DOCKER_IMAGE}:${NOTIFICATION_DOCKER_TAG}
    restart: unless-stopped
    container_name: notification-service
    ports:
      - "${NOTIFICATION_PPROF_HOST_PORT}:${NOTIFICATION_PPROF_PORT}"
    environment:
      - NOTIFICATION_LOG_LEVEL=${NOTIFICATION_LOG_LEVEL}
      - NOTIFICATION_PPROF_ENABLED=${NOTIFICATION_PPROF_ENABLED}
      - NOTIFICATION_PPROF_ADDR=${NOTIFICATION_PPROF_ADDR}
      - NOTIFICATION_NATS_URL=${NOTIFICATION_NATS_URL}
      - NOTIFICATION_NATS_TIMEOUT=${NOTIFICATION_NATS_TIMEOUT}
      - NOTIFICATION_SUBSCRIBER_STREAM=${NOTIFICATION_SUBSCRIBER_STREAM}
      - NOTIFICATION_SUBSCRIBER_SUBJECT=${NOTIFICATION_SUBSCRIBER_SUBJECT}
      - NOTIFICATION_SUBSCRIBER_CONSUMER=${NOTIFICATION_SUBSCRIBER_CONSUMER}
      - NOTIFICATION_SUBSCRIBER_BATCH=${NOTIFICATION_SUBSCRIBER_BATCH}
      - NOTIFICATION_SUBSCRIBER_TIMEOUT=${NOTIFICATION_SUBSCRIBER_TIMEOUT}
      - NOTIFICATION_SUBSCRIBER_INTERVAL=${NOTIFICATION_SUBSCRIBER_INTERVAL}
      - NOTIFICATION_SUBSCRIBER_WORKERS=${NOTIFICATION_SUBSCRIBER_WORKERS}
      - NOTIFICATION_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT=${NOTIFICATION_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT}
      - NOTIFICATION_TELEMETRY_TRACES_OTLPHTTP_INSECURE=${NOTIFICATION_TELEMETRY_TRACES_OTLPHTTP_INSECURE}
      - NOTIFICATION_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT=${NOTIFICATION_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT}
      - NOTIFICATION_SHUTDOWN_TIMEOUT=${NOTIFICATION_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      nats:
        condition: service_healthy

  api_gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
      args:
        GW_DOCKER_IMAGE: ${GW_DOCKER_IMAGE}
        GW_DOCKER_TAG: ${GW_DOCKER_TAG}
    image: ${GW_DOCKER_IMAGE}:${GW_DOCKER_TAG}
    restart: unless-stopped
    container_name: api_gateway
    ports:
      - "${GW_HOST_PORT}:${GW_SERVER_PORT}"
      - "${GW_PPROF_HOST_PORT}:${GW_PPROF_PORT}"
    environment:
      - GW_SERVER_PORT=${GW_SERVER_PORT}
      - GW_SERVER_MAXHEADERBYTES=${GW_SERVER_MAXHEADERBYTES}
      - GW_SERVER_TIMEOUT_READ=${GW_SERVER_TIMEOUT_READ}
      - GW_SERVER_TIMEOUT_WRITE=${GW_SERVER_TIMEOUT_WRITE}
      - GW_SERVER_TIMEOUT_IDLE=${GW_SERVER_TIMEOUT_IDLE}
      - GW_SERVER_TIMEOUT_READHEADER=${GW_SERVER_TIMEOUT_READHEADER}
      - GW_LOG_LEVEL=${GW_LOG_LEVEL}
      - GW_PPROF_ENABLED=${GW_PPROF_ENABLED}
      - GW_PPROF_ADDR=${GW_PPROF_ADDR}
      - GW_SERVICES_PRODUCT_URL=${GW_SERVICES_PRODUCT_URL}
      - GW_SERVICES_PRODUCT_FROM=${GW_SERVICES_PRODUCT_FROM}
      - GW_SERVICES_PRODUCT_TO=${GW_SERVICES_PRODUCT_TO}
      - GW_SERVICES_ORDER_URL=${GW_SERVICES_ORDER_URL}
      - GW_SERVICES_ORDER_FROM=${GW_SERVICES_ORDER_FROM}
      - GW_SERVICES_ORDER_TO=${GW_SERVICES_ORDER_TO}
      - GW_SERVICES_USER_GRPC_ADDR=${GW_SERVICES_USER_GRPC_ADDR}
      - GW_SERVICES_USER_GRPC_TIMEOUT=${GW_SERVICES_USER_GRPC_TIMEOUT}
      - GW_SERVICES_USER_FROM=${GW_SERVICES_USER_FROM}
      - GW_IDP_JWKSURL=${GW_IDP_JWKSURL}
      - GW_IDP_ISSUER=${GW_IDP_ISSUER}
      - GW_IDP_CLIENTID=${GW_IDP_CLIENTID}
      - GW_IDP_MININTERVAL=${GW_IDP_MININTERVAL}
      - GW_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT=${GW_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT}
      - GW_TELEMETRY_TRACES_OTLPHTTP_INSECURE=${GW_TELEMETRY_TRACES_OTLPHTTP_INSECURE}
      - GW_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT=${GW_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT}
      - GW_SHUTDOWN_TIMEOUT=${GW_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      product_service:
        condition: service_started
      order_service:
        condition: service_started
      kc_check:
        condition: service_completed_successfully

  user_service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
      args:
        GW_DOCKER_IMAGE: ${USER_DOCKER_IMAGE}
        GW_DOCKER_TAG: ${USER_DOCKER_TAG}
    image: ${USER_DOCKER_IMAGE}:${USER_DOCKER_TAG}
    restart: unless-stopped
    container_name: user_service
    ports:
      - "${USER_PPROF_HOST_PORT}:${USER_PPROF_PORT}"
      - "${USER_GRPC_HOST_PORT}:${USER_GRPC_PORT}"
    environment:
      - USER_LOG_LEVEL=${USER_LOG_LEVEL}
      - USER_PPROF_ENABLED=${USER_PPROF_ENABLED}
      - USER_PPROF_ADDR=${USER_PPROF_ADDR}
      - USER_GRPC_PORT=${USER_GRPC_PORT}
      - USER_GRPC_REFLECTION=${USER_GRPC_REFLECTION}
      - USER_IDP_URL=${USER_IDP_URL}
      - USER_IDP_REALM=${USER_IDP_REALM}
      - USER_IDP_CLIENTID=${USER_IDP_CLIENTID}
      - USER_IDP_SECRET=${USER_IDP_SECRET}
      - USER_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT=${USER_TELEMETRY_TRACES_OTLPHTTP_ENDPOINT}
      - USER_TELEMETRY_TRACES_OTLPHTTP_INSECURE=${USER_TELEMETRY_TRACES_OTLPHTTP_INSECURE}
      - USER_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT=${USER_TELEMETRY_TRACES_OTLPHTTP_TIMEOUT}
      - USER_SHUTDOWN_TIMEOUT=${USER_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      kc_check:
        condition: service_completed_successfully
