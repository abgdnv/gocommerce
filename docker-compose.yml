volumes:
  postgres_data:
    name: postgres_data
  nats_data:
    name: nats_data
  kc_data:
    name: kc_data

networks:
  ecommerce-network:
    name: ecommerce-network

services:
  db:
    image: postgres:17.5-alpine
    restart: always
    container_name: postgres
    ports:
      - "${POSTGRES_PORT_HOST}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  nats:
    image: nats:2.11.6-alpine
    container_name: nats
    ports:
      - "${NATS_HOST_PORT_CLIENT}:4222"
      - "${NATS_HOST_PORT_ROUTING}:6222"
      - "${NATS_HOST_PORT_MONITORING}:${NATS_INTERNAL_MONITORING_PORT}"
    command:
      - "--jetstream"
      - "--store_dir=/data"
      - "--http_port=${NATS_INTERNAL_MONITORING_PORT}"
    volumes:
      - nats_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:${NATS_INTERNAL_MONITORING_PORT}/healthz || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  nats-stream-setup:
    image: natsio/nats-box:0.18.0-nonroot
    container_name: nats-stream-setup
    command: >
      sh -c "
        nats --server=nats:4222 stream create --config=/config/stream_orders.json ||
        nats --server=nats:4222 stream update ORDERS --config=/config/stream_orders.json -f
      "
    volumes:
      - ./docker/nats/stream_orders.json:/config/stream_orders.json
    networks:
      - ecommerce-network
    depends_on:
      nats:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:26.3
    container_name: keycloak
    command:
     - start-dev
     - --import-realm
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      - KC_HOSTNAME=localhost
      - KC_HOSTNAME_PORT=${KC_HTTP_HOST_PORT}
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HOSTNAME_STRICT=false
    ports:
      - "${KC_HTTP_HOST_PORT}:8080"
    volumes:
      - kc_data:/opt/keycloak/data/
      - ./deploy/charts/keycloak/realm/:/opt/keycloak/data/import
    networks:
      - ecommerce-network

  product_migrator:
    image: migrate/migrate:4
    container_name: product-migrator
    command: [ "-path", "/migrations", "-database", "${PRODUCT_SVC_DATABASE_URL}", "up" ]
    volumes:
      - ./deploy/charts/db-migrations/migrations/product_service:/migrations
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy

  product_service:
    build:
      context: .
      dockerfile: product_service/Dockerfile
      args:
        PRODUCT_SVC_DOCKER_IMAGE: ${PRODUCT_SVC_DOCKER_IMAGE}
        PRODUCT_SVC_DOCKER_TAG: ${PRODUCT_SVC_DOCKER_TAG}
    image: ${PRODUCT_SVC_DOCKER_IMAGE}:${PRODUCT_SVC_DOCKER_TAG}
    restart: unless-stopped
    container_name: product-service
    ports:
      - "${PRODUCT_SVC_HOST_PORT}:${PRODUCT_SVC_SERVER_PORT}"
      - "${PRODUCT_SVC_PPROF_HOST_PORT}:${PRODUCT_SVC_PPROF_PORT}"
      - "${PRODUCT_SVC_GRPC_HOST_PORT}:${PRODUCT_SVC_GRPC_PORT}"
    environment:
      - PRODUCT_SVC_SERVER_PORT=${PRODUCT_SVC_SERVER_PORT}
      - PRODUCT_SVC_DATABASE_URL=${PRODUCT_SVC_DATABASE_URL}
      - PRODUCT_SVC_DATABASE_TIMEOUT=${PRODUCT_SVC_DATABASE_TIMEOUT}
      - PRODUCT_SVC_LOG_LEVEL=${PRODUCT_SVC_LOG_LEVEL}
      - PRODUCT_SVC_SERVER_MAXHEADERBYTES=${PRODUCT_SVC_SERVER_MAXHEADERBYTES}
      - PRODUCT_SVC_SERVER_TIMEOUT_READ=${PRODUCT_SVC_SERVER_TIMEOUT_READ}
      - PRODUCT_SVC_SERVER_TIMEOUT_WRITE=${PRODUCT_SVC_SERVER_TIMEOUT_WRITE}
      - PRODUCT_SVC_SERVER_TIMEOUT_IDLE=${PRODUCT_SVC_SERVER_TIMEOUT_IDLE}
      - PRODUCT_SVC_SERVER_TIMEOUT_READHEADER=${PRODUCT_SVC_SERVER_TIMEOUT_READHEADER}
      - PRODUCT_SVC_PPROF_ENABLED=${PRODUCT_SVC_PPROF_ENABLED}
      - PRODUCT_SVC_PPROF_ADDR=${PRODUCT_SVC_PPROF_ADDR}
      - PRODUCT_SVC_GRPC_PORT=${PRODUCT_SVC_GRPC_PORT}
      - PRODUCT_SVC_GRPC_REFLECTION=${PRODUCT_SVC_GRPC_REFLECTION}
      - PRODUCT_SVC_SHUTDOWN_TIMEOUT=${PRODUCT_SVC_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy
      product_migrator:
        condition: service_completed_successfully

  order_migrator:
    image: migrate/migrate:4
    container_name: order-migrator
    command: [ "-path", "/migrations", "-database", "${ORDER_SVC_DATABASE_URL}", "up" ]
    volumes:
      - ./deploy/charts/db-migrations/migrations/order_service:/migrations
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy

  order_service:
    build:
      context: .
      dockerfile: order_service/Dockerfile
      args:
        ORDER_SVC_DOCKER_IMAGE: ${ORDER_SVC_DOCKER_IMAGE}
        ORDER_SVC_DOCKER_TAG: ${ORDER_SVC_DOCKER_TAG}
    image: ${ORDER_SVC_DOCKER_IMAGE}:${ORDER_SVC_DOCKER_TAG}
    restart: unless-stopped
    container_name: order-service
    ports:
      - "${ORDER_SVC_HOST_PORT}:${ORDER_SVC_SERVER_PORT}"
      - "${ORDER_SVC_PPROF_HOST_PORT}:${ORDER_SVC_PPROF_PORT}"
    environment:
      - ORDER_SVC_SERVER_PORT=${ORDER_SVC_SERVER_PORT}
      - ORDER_SVC_DATABASE_URL=${ORDER_SVC_DATABASE_URL}
      - ORDER_SVC_DATABASE_TIMEOUT=${ORDER_SVC_DATABASE_TIMEOUT}
      - ORDER_SVC_LOG_LEVEL=${ORDER_SVC_LOG_LEVEL}
      - ORDER_SVC_SERVER_MAXHEADERBYTES=${ORDER_SVC_SERVER_MAXHEADERBYTES}
      - ORDER_SVC_SERVER_TIMEOUT_READ=${ORDER_SVC_SERVER_TIMEOUT_READ}
      - ORDER_SVC_SERVER_TIMEOUT_WRITE=${ORDER_SVC_SERVER_TIMEOUT_WRITE}
      - ORDER_SVC_SERVER_TIMEOUT_IDLE=${ORDER_SVC_SERVER_TIMEOUT_IDLE}
      - ORDER_SVC_SERVER_TIMEOUT_READHEADER=${ORDER_SVC_SERVER_TIMEOUT_READHEADER}
      - ORDER_SVC_PPROF_ENABLED=${ORDER_SVC_PPROF_ENABLED}
      - ORDER_SVC_PPROF_ADDR=${ORDER_SVC_PPROF_ADDR}
      - ORDER_SVC_SERVICES_PRODUCT_GRPC_ADDR=${ORDER_SVC_SERVICES_PRODUCT_GRPC_ADDR}
      - ORDER_SVC_SERVICES_PRODUCT_GRPC_TIMEOUT=${ORDER_SVC_SERVICES_PRODUCT_GRPC_TIMEOUT}
      - ORDER_SVC_NATS_URL=${ORDER_SVC_NATS_URL}
      - ORDER_SVC_NATS_TIMEOUT=${ORDER_SVC_NATS_TIMEOUT}
      - ORDER_SVC_SHUTDOWN_TIMEOUT=${ORDER_SVC_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      db:
        condition: service_healthy
      nats:
        condition: service_healthy
      order_migrator:
        condition: service_completed_successfully

  notification_service:
    build:
      context: .
      dockerfile: notification_service/Dockerfile
      args:
        NOTIFICATION_SVC_DOCKER_IMAGE: ${NOTIFICATION_SVC_DOCKER_IMAGE}
        NOTIFICATION_SVC_DOCKER_TAG: ${NOTIFICATION_SVC_DOCKER_TAG}
    image: ${NOTIFICATION_SVC_DOCKER_IMAGE}:${NOTIFICATION_SVC_DOCKER_TAG}
    restart: unless-stopped
    container_name: notification-service
    ports:
      - "${NOTIFICATION_SVC_PPROF_HOST_PORT}:${NOTIFICATION_SVC_PPROF_PORT}"
    environment:
      - NOTIFICATION_SVC_LOG_LEVEL=${NOTIFICATION_SVC_LOG_LEVEL}
      - NOTIFICATION_SVC_PPROF_ENABLED=${NOTIFICATION_SVC_PPROF_ENABLED}
      - NOTIFICATION_SVC_PPROF_ADDR=${NOTIFICATION_SVC_PPROF_ADDR}
      - NOTIFICATION_SVC_NATS_URL=${NOTIFICATION_SVC_NATS_URL}
      - NOTIFICATION_SVC_NATS_TIMEOUT=${NOTIFICATION_SVC_NATS_TIMEOUT}
      - NOTIFICATION_SVC_SUBSCRIBER_STREAM=${NOTIFICATION_SVC_SUBSCRIBER_STREAM}
      - NOTIFICATION_SVC_SUBSCRIBER_SUBJECT=${NOTIFICATION_SVC_SUBSCRIBER_SUBJECT}
      - NOTIFICATION_SVC_SUBSCRIBER_CONSUMER=${NOTIFICATION_SVC_SUBSCRIBER_CONSUMER}
      - NOTIFICATION_SVC_SUBSCRIBER_BATCH=${NOTIFICATION_SVC_SUBSCRIBER_BATCH}
      - NOTIFICATION_SVC_SUBSCRIBER_TIMEOUT=${NOTIFICATION_SVC_SUBSCRIBER_TIMEOUT}
      - NOTIFICATION_SVC_SUBSCRIBER_INTERVAL=${NOTIFICATION_SVC_SUBSCRIBER_INTERVAL}
      - NOTIFICATION_SVC_SUBSCRIBER_WORKERS=${NOTIFICATION_SVC_SUBSCRIBER_WORKERS}
      - NOTIFICATION_SVC_SHUTDOWN_TIMEOUT=${NOTIFICATION_SVC_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      nats:
        condition: service_healthy

  api_gateway:
    build:
      context: .
      dockerfile: api_gateway/Dockerfile
      args:
        GW_SVC_DOCKER_IMAGE: ${GW_SVC_DOCKER_IMAGE}
        GW_SVC_DOCKER_TAG: ${GW_SVC_DOCKER_TAG}
    image: ${GW_SVC_DOCKER_IMAGE}:${GW_SVC_DOCKER_TAG}
    restart: unless-stopped
    container_name: api_gateway
    ports:
      - "${GW_SVC_HOST_PORT}:${GW_SVC_SERVER_PORT}"
      - "${GW_SVC_PPROF_HOST_PORT}:${GW_SVC_PPROF_PORT}"
    environment:
      - GW_SVC_SERVER_PORT=${GW_SVC_SERVER_PORT}
      - GW_SVC_SERVER_MAXHEADERBYTES=${GW_SVC_SERVER_MAXHEADERBYTES}
      - GW_SVC_SERVER_TIMEOUT_READ=${GW_SVC_SERVER_TIMEOUT_READ}
      - GW_SVC_SERVER_TIMEOUT_WRITE=${GW_SVC_SERVER_TIMEOUT_WRITE}
      - GW_SVC_SERVER_TIMEOUT_IDLE=${GW_SVC_SERVER_TIMEOUT_IDLE}
      - GW_SVC_SERVER_TIMEOUT_READHEADER=${GW_SVC_SERVER_TIMEOUT_READHEADER}
      - GW_SVC_LOG_LEVEL=${GW_SVC_LOG_LEVEL}
      - GW_SVC_PPROF_ENABLED=${GW_SVC_PPROF_ENABLED}
      - GW_SVC_PPROF_ADDR=${GW_SVC_PPROF_ADDR}
      - GW_SVC_SERVICES_PRODUCT_URL=${GW_SVC_SERVICES_PRODUCT_URL}
      - GW_SVC_SERVICES_PRODUCT_FROM=${GW_SVC_SERVICES_PRODUCT_FROM}
      - GW_SVC_SERVICES_PRODUCT_TO=${GW_SVC_SERVICES_PRODUCT_TO}
      - GW_SVC_SERVICES_ORDER_URL=${GW_SVC_SERVICES_ORDER_URL}
      - GW_SVC_SERVICES_ORDER_FROM=${GW_SVC_SERVICES_ORDER_FROM}
      - GW_SVC_SERVICES_ORDER_TO=${GW_SVC_SERVICES_ORDER_TO}
      - GW_SVC_SERVICES_USER_GRPC_ADDR=${GW_SVC_SERVICES_USER_GRPC_ADDR}
      - GW_SVC_SERVICES_USER_GRPC_TIMEOUT=${GW_SVC_SERVICES_USER_GRPC_TIMEOUT}
      - GW_SVC_SERVICES_USER_FROM=${GW_SVC_SERVICES_USER_FROM}
      - GW_SVC_SHUTDOWN_TIMEOUT=${GW_SVC_SHUTDOWN_TIMEOUT}
      - GW_SVC_IDP_JWKSURL=${GW_SVC_IDP_JWKSURL}
      - GW_SVC_IDP_ISSUER=${GW_SVC_IDP_ISSUER}
      - GW_SVC_IDP_CLIENTID=${GW_SVC_IDP_CLIENTID}
      - GW_SVC_IDP_MININTERVAL=${GW_SVC_IDP_MININTERVAL}
    networks:
      - ecommerce-network
    depends_on:
      - product_service
      - order_service

  user_service:
    build:
      context: .
      dockerfile: user_service/Dockerfile
      args:
        GW_SVC_DOCKER_IMAGE: ${USER_SVC_DOCKER_IMAGE}
        GW_SVC_DOCKER_TAG: ${USER_SVC_DOCKER_TAG}
    image: ${USER_SVC_DOCKER_IMAGE}:${USER_SVC_DOCKER_TAG}
    restart: unless-stopped
    container_name: user_service
    ports:
      - "${USER_SVC_PPROF_HOST_PORT}:${USER_SVC_PPROF_PORT}"
      - "${USER_SVC_GRPC_HOST_PORT}:${USER_SVC_GRPC_PORT}"
    environment:
      - USER_SVC_LOG_LEVEL=${USER_SVC_LOG_LEVEL}
      - USER_SVC_PPROF_ENABLED=${USER_SVC_PPROF_ENABLED}
      - USER_SVC_PPROF_ADDR=${USER_SVC_PPROF_ADDR}
      - USER_SVC_GRPC_PORT=${USER_SVC_GRPC_PORT}
      - USER_SVC_GRPC_REFLECTION=${USER_SVC_GRPC_REFLECTION}
      - USER_SVC_IDP_URL=${USER_SVC_IDP_URL}
      - USER_SVC_IDP_REALM=${USER_SVC_IDP_REALM}
      - USER_SVC_IDP_CLIENTID=${USER_SVC_IDP_CLIENTID}
      - USER_SVC_IDP_SECRET=${USER_SVC_IDP_SECRET}
      - USER_SVC_SHUTDOWN_TIMEOUT=${USER_SVC_SHUTDOWN_TIMEOUT}
    networks:
      - ecommerce-network
    depends_on:
      - keycloak
